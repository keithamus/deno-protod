// Generated by protod v0.1.3
import {
  boolField,
  bytesField,
  doubleField,
  enumField,
  FieldSet,
  fixed32Field,
  fixed64Field,
  fromBytes,
  fromJSON,
  int32Field,
  int64Field,
  JSON,
  mapField,
  packedField,
  repeatedField,
  sfixed32Field,
  sfixed64Field,
  sint32Field,
  sint64Field,
  stringField,
  toBytes,
  toJSON,
  uint32Field,
  uint64Field,
} from "../mod.ts";

export enum Enum {
  a = 0,
  b = 1,
  c = 2,
}

export class Sub {
  a: string;

  constructor(init: Partial<Sub>) {
    this.a = init.a ?? "";
  }

  static fields: FieldSet<Sub> = {
    a: [1, stringField],
  };

  static fromBytes(bytes: Uint8Array): Sub {
    return new Sub(
      fromBytes<Sub>(bytes, Sub.fields),
    );
  }

  static fromJSON(json: JSON): Sub {
    return new Sub(
      fromJSON<Sub>(json, Sub.fields),
    );
  }

  toBytes(): Uint8Array {
    return toBytes<Sub>(this, Sub.fields);
  }

  toJSON() {
    return toJSON<Sub>(this, Sub.fields);
  }
}

export class Fields {
  a: number;
  b: bigint;
  c: number;
  d: bigint;
  e: number;
  f: bigint;
  g: boolean;
  h: Enum;
  i: bigint;
  j: bigint;
  k: number;
  l: string;
  m: Uint8Array;
  n: Sub;
  o: number;
  p: number;
  q: Map<number, number>;
  r: Map<number, string>;
  s: Map<string, number>;
  t: Map<bigint, Enum>;
  u: bigint[];
  v: boolean[];
  w: string[];
  x: Sub[];
  #y: string | void = undefined;
  get y(): string | void {
    return this.#y;
  }
  set y(value: string | void) {
    this.#y = value || "";
    this.#z = undefined;
  }
  #z: number | void = undefined;
  get z(): number | void {
    return this.#z;
  }
  set z(value: number | void) {
    this.#y = undefined;
    this.#z = value || 0;
  }

  constructor(init: Partial<Fields>) {
    this.a = init.a ?? 0;
    this.b = init.b ?? 0n;
    this.c = init.c ?? 0;
    this.d = init.d ?? 0n;
    this.e = init.e ?? 0;
    this.f = init.f ?? 0n;
    this.g = init.g ?? false;
    this.h = init.h ?? Enum.a;
    this.i = init.i ?? 0n;
    this.j = init.j ?? 0n;
    this.k = init.k ?? 0;
    this.l = init.l ?? "";
    this.m = init.m ?? new Uint8Array(0);
    this.n = init.n ?? new Sub({});
    this.o = init.o ?? 0;
    this.p = init.p ?? 0;
    this.q = init.q ?? new Map();
    this.r = init.r ?? new Map();
    this.s = init.s ?? new Map();
    this.t = init.t ?? new Map();
    this.u = init.u ?? [];
    this.v = init.v ?? [];
    this.w = init.w ?? [];
    this.x = init.x ?? [];
    if ("y" in init) {
      this.y = init.y ?? undefined;
    } else if ("z" in init) {
      this.z = init.z ?? undefined;
    }
  }

  static fields: FieldSet<Fields> = {
    a: [1, int32Field],
    b: [2, int64Field],
    c: [3, uint32Field],
    d: [4, uint64Field],
    e: [5, sint32Field],
    f: [6, sint64Field],
    g: [7, boolField],
    h: [8, enumField(Enum)],
    i: [9, fixed64Field],
    j: [10, sfixed64Field],
    k: [11, doubleField],
    l: [12, stringField],
    m: [13, bytesField],
    n: [14, Sub],
    o: [15, fixed32Field],
    p: [16, sfixed32Field],
    q: [17, mapField(int32Field, int32Field)],
    r: [18, mapField(int32Field, stringField)],
    s: [19, mapField(stringField, int32Field)],
    t: [20, mapField(uint64Field, enumField(Enum))],
    u: [21, packedField(uint64Field)],
    v: [22, packedField(boolField)],
    w: [23, repeatedField(stringField)],
    x: [24, repeatedField(Sub)],
    y: [25, stringField],
    z: [26, int32Field],
  };

  static fromBytes(bytes: Uint8Array): Fields {
    return new Fields(
      fromBytes<Fields>(bytes, Fields.fields),
    );
  }

  static fromJSON(json: JSON): Fields {
    return new Fields(
      fromJSON<Fields>(json, Fields.fields),
    );
  }

  toBytes(): Uint8Array {
    return toBytes<Fields>(this, Fields.fields);
  }

  toJSON() {
    return toJSON<Fields>(this, Fields.fields);
  }
}
