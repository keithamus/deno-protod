import { assertEquals } from "https://deno.land/std@0.66.0/testing/asserts.ts";
import { deserialize, ProtoBufEntry, serialize } from "./mod.ts";

function assertMod(bytes: Uint8Array, value: ProtoBufEntry[]) {
  let i = -1;
  for (const entry of deserialize(bytes)) assertEquals(entry, value[i += 1]);
  assertEquals(Array.from(deserialize(bytes)), value);
  assertEquals(Array.from(deserialize(serialize(value))), value);
  assertEquals(serialize(deserialize(bytes)), bytes);
}

Deno.test("Serialize wireType 0", () => {
  assertMod(Uint8Array.of(0x10, 0x01), [[2, 0, 1n]]);
  assertMod(Uint8Array.of(0x08, 0x96, 0x01), [[1, 0, 150n]]);
  assertMod(
    Uint8Array.of(0x10, 0x01, 0x08, 0x96, 0x01),
    [[2, 0, 1n], [1, 0, 150n]],
  );
});

Deno.test("Serialize wireType 2", () => {
  assertMod(
    Uint8Array.of(0x0a, 0x03, 0x66, 0x6f, 0x6f),
    [[1, 2, Uint8Array.of(0x66, 0x6f, 0x6f)]],
  );
  assertMod(
    Uint8Array.of(0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67),
    [[2, 2, Uint8Array.of(0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67)]],
  );
  assertMod(
    Uint8Array.of(0x1a, 0x03, 0x08, 0x96, 0x01),
    [[3, 2, Uint8Array.of(0x08, 0x96, 0x01)]],
  );
  assertMod(
    Uint8Array.of(
      ...[0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x12, 0x07, 0x74],
      ...[0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x03],
      ...[0x08, 0x96, 0x01],
    ),
    [
      [1, 2, Uint8Array.of(0x66, 0x6f, 0x6f)],
      [2, 2, Uint8Array.of(0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67)],
      [3, 2, Uint8Array.of(0x08, 0x96, 0x01)],
    ],
  );
});

Deno.test("Serialize Fields", () => {
  assertMod(
    Uint8Array.of(
      ...[0x08, 0x81, 0x80, 0x80, 0x80, 0xf8, 0xff, 0xff],
      ...[0xff, 0xff, 0x01, 0x10, 0x80, 0x80, 0x80, 0x80],
      ...[0x80, 0x80, 0x80, 0x80, 0x80, 0x01, 0x18, 0xff],
      ...[0xff, 0xff, 0xff, 0x0f, 0x20, 0xff, 0xff, 0xff],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x28],
      ...[0xfd, 0xff, 0xff, 0xff, 0x0f, 0x30, 0xff, 0xff],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01],
      ...[0x38, 0x01, 0x40, 0x01, 0x49, 0xff, 0xff, 0xff],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0x51, 0x00, 0x00],
      ...[0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x59, 0xff],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f, 0x62],
      ...[0x03, 0x66, 0x6f, 0x6f, 0x6a, 0x06, 0x66, 0x66],
      ...[0x66, 0x66, 0x66, 0x66, 0x72, 0x05, 0x0a, 0x03],
      ...[0x66, 0x6f, 0x6f, 0x7d, 0xff, 0xff, 0xff, 0xff],
      ...[0x85, 0x01, 0x01, 0x00, 0x00, 0x80, 0x8a, 0x01],
      ...[0x16, 0x08, 0x81, 0x80, 0x80, 0x80, 0xf8, 0xff],
      ...[0xff, 0xff, 0xff, 0x01, 0x10, 0x81, 0x80, 0x80],
      ...[0x80, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x92],
      ...[0x01, 0x10, 0x08, 0x81, 0x80, 0x80, 0x80, 0xf8],
      ...[0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x03, 0x66],
      ...[0x6f, 0x6f, 0x9a, 0x01, 0x10, 0x0a, 0x03, 0x66],
      ...[0x6f, 0x6f, 0x10, 0x81, 0x80, 0x80, 0x80, 0xf8],
      ...[0xff, 0xff, 0xff, 0xff, 0x01, 0xa2, 0x01, 0x0d],
      ...[0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
      ...[0xff, 0xff, 0x01, 0x10, 0x02, 0xaa, 0x01, 0x1e],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
      ...[0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
      ...[0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff],
      ...[0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xb2, 0x01],
      ...[0x03, 0x00, 0x01, 0x00, 0xba, 0x01, 0x03, 0x66],
      ...[0x6f, 0x6f, 0xba, 0x01, 0x03, 0x62, 0x61, 0x72],
      ...[0xba, 0x01, 0x03, 0x62, 0x61, 0x7a, 0xca, 0x01],
      ...[0x03, 0x66, 0x6f, 0x6f],
    ),
    [
      [1, 0, 18446744071562067969n],
      [2, 0, 9223372036854775808n],
      [3, 0, 4294967295n],
      [4, 0, 18446744073709551615n],
      [5, 0, 4294967293n],
      [6, 0, 18446744073709551615n],
      [7, 0, 1n],
      [8, 0, 1n],
      [9, 1, Uint8Array.of(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff)],
      [10, 1, Uint8Array.of(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80)],
      [11, 1, Uint8Array.of(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f)],
      [12, 2, Uint8Array.of(0x66, 0x6f, 0x6f)],
      [13, 2, Uint8Array.of(0x66, 0x66, 0x66, 0x66, 0x66, 0x66)],
      [14, 2, Uint8Array.of(0x0a, 0x03, 0x66, 0x6f, 0x6f)],
      [15, 5, Uint8Array.of(0xff, 0xff, 0xff, 0xff)],
      [16, 5, Uint8Array.of(0x01, 0x00, 0x00, 0x80)],
      [
        17,
        2,
        Uint8Array.of(
          ...[0x08, 0x81, 0x80, 0x80, 0x80, 0xf8, 0xff, 0xff],
          ...[0xff, 0xff, 0x01, 0x10, 0x81, 0x80, 0x80, 0x80],
          ...[0xf8, 0xff, 0xff, 0xff, 0xff, 0x01],
        ),
      ],
      [
        18,
        2,
        Uint8Array.of(
          ...[0x08, 0x81, 0x80, 0x80, 0x80, 0xf8, 0xff, 0xff],
          ...[0xff, 0xff, 0x01, 0x12, 0x03, 0x66, 0x6f, 0x6f],
        ),
      ],
      [
        19,
        2,
        Uint8Array.of(
          ...[0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x10, 0x81, 0x80],
          ...[0x80, 0x80, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01],
        ),
      ],
      [
        20,
        2,
        Uint8Array.of(
          ...[0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
          ...[0xff, 0xff, 0x01, 0x10, 0x02],
        ),
      ],
      [
        21,
        2,
        Uint8Array.of(
          ...[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
          ...[0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
          ...[0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff],
          ...[0xff, 0xff, 0xff, 0xff, 0xff, 0x01],
        ),
      ],
      [22, 2, Uint8Array.of(0x00, 0x01, 0x00)],
      [23, 2, Uint8Array.of(0x66, 0x6f, 0x6f)],
      [23, 2, Uint8Array.of(0x62, 0x61, 0x72)],
      [23, 2, Uint8Array.of(0x62, 0x61, 0x7a)],
      [25, 2, Uint8Array.of(0x66, 0x6f, 0x6f)],
    ],
  );
});
